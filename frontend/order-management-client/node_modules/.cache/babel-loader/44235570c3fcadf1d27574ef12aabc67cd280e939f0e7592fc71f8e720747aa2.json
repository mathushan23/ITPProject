{"ast":null,"code":"useEffect(() => {\n  const fetchOrders = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('http://localhost:5001/api/orders');\n      setOrders(response.data);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  fetchOrders();\n}, []);\nconst handleCancelOrder = async (id, status) => {\n  if (status !== 'Pending') {\n    alert('You can only cancel orders that are \"Pending\".');\n    return;\n  }\n  try {\n    const response = await axios.delete(`http://localhost:5001/api/orders/${id}`);\n    setOrders(prevOrders => prevOrders.filter(order => order._id !== id));\n    alert('Order canceled successfully!');\n  } catch (error) {\n    console.error('Error canceling order:', error);\n    alert('Failed to cancel the order.');\n  }\n};\nconst handleEditOrder = order => {\n  if (order.status !== 'Pending') {\n    alert('You can only edit orders with \"Pending\" status.');\n    return;\n  }\n  setCustomerName(order.customerName);\n  setProduct(order.product);\n  setQuantity(order.quantity);\n  setNic(order.NIC);\n  setAccountNumber(order.AccountNumber);\n  setPhoneNumber(order.PhoneNumber);\n  setAddress(order.Address);\n  setEmail(order.Email);\n  setAmount(order.Amount);\n};\nconst handleUpdateOrder = async () => {\n  const orderData = {\n    customerName,\n    product,\n    quantity,\n    NIC,\n    AccountNumber,\n    PhoneNumber,\n    Address,\n    Email,\n    Amount\n  };\n  try {\n    const response = await axios.put(`http://localhost:5001/api/orders/${id}`, orderData);\n    setOrders(prevOrders => prevOrders.map(order => order._id === id ? response.data : order));\n    alert('Order updated successfully!');\n  } catch (error) {\n    console.error('Error updating order:', error);\n    alert('Failed to update the order');\n  }\n};\nconst formatDate = dateString => {\n  const options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  };\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', options);\n};\nconst getStatusColor = status => {\n  switch (status) {\n    case 'Shipped':\n      return 'blue';\n    case 'Completed':\n      return 'green';\n    case 'Canceled':\n      return 'red';\n    default:\n      return 'gray';\n  }\n};","map":{"version":3,"names":["useEffect","fetchOrders","setLoading","response","axios","get","setOrders","data","error","console","handleCancelOrder","id","status","alert","delete","prevOrders","filter","order","_id","handleEditOrder","setCustomerName","customerName","setProduct","product","setQuantity","quantity","setNic","NIC","setAccountNumber","AccountNumber","setPhoneNumber","PhoneNumber","setAddress","Address","setEmail","Email","setAmount","Amount","handleUpdateOrder","orderData","put","map","formatDate","dateString","options","weekday","year","month","day","hour","minute","second","hour12","date","Date","toLocaleDateString","getStatusColor"],"sources":["C:/Users/VITHUSHAN/Desktop/update today project/my last order/frontend/order-management-client/src/components/CustomerOrders.js"],"sourcesContent":["useEffect(() => {\r\n  const fetchOrders = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get('http://localhost:5001/api/orders');\r\n      setOrders(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching orders:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  fetchOrders();\r\n}, []);\r\n\r\nconst handleCancelOrder = async (id, status) => {\r\n  if (status !== 'Pending') {\r\n    alert('You can only cancel orders that are \"Pending\".');\r\n    return;\r\n  }\r\n  try {\r\n    const response = await axios.delete(`http://localhost:5001/api/orders/${id}`);\r\n    setOrders((prevOrders) => prevOrders.filter((order) => order._id !== id));\r\n    alert('Order canceled successfully!');\r\n  } catch (error) {\r\n    console.error('Error canceling order:', error);\r\n    alert('Failed to cancel the order.');\r\n  }\r\n};\r\n\r\nconst handleEditOrder = (order) => {\r\n  if (order.status !== 'Pending') {\r\n    alert('You can only edit orders with \"Pending\" status.');\r\n    return;\r\n  }\r\n  setCustomerName(order.customerName);\r\n  setProduct(order.product);\r\n  setQuantity(order.quantity);\r\n  setNic(order.NIC);\r\n  setAccountNumber(order.AccountNumber);\r\n  setPhoneNumber(order.PhoneNumber);\r\n  setAddress(order.Address);\r\n  setEmail(order.Email);\r\n  setAmount(order.Amount);\r\n};\r\n\r\nconst handleUpdateOrder = async () => {\r\n  const orderData = {\r\n    customerName,\r\n    product,\r\n    quantity,\r\n    NIC,\r\n    AccountNumber,\r\n    PhoneNumber,\r\n    Address,\r\n    Email,\r\n    Amount,\r\n  };\r\n  try {\r\n    const response = await axios.put(`http://localhost:5001/api/orders/${id}`, orderData);\r\n    setOrders((prevOrders) =>\r\n      prevOrders.map((order) => (order._id === id ? response.data : order))\r\n    );\r\n    alert('Order updated successfully!');\r\n  } catch (error) {\r\n    console.error('Error updating order:', error);\r\n    alert('Failed to update the order');\r\n  }\r\n};\r\n\r\nconst formatDate = (dateString) => {\r\n  const options = {\r\n    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',\r\n    hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true\r\n  };\r\n  const date = new Date(dateString);\r\n  return date.toLocaleDateString('en-US', options);\r\n};\r\n\r\nconst getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'Shipped': return 'blue';\r\n    case 'Completed': return 'green';\r\n    case 'Canceled': return 'red';\r\n    default: return 'gray';\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}